/**
 * Copyright Â© 2020 2021 2022 7thCode.(http://seventh-code.com/)
 * This software is released under the MIT License.
 * opensource.org/licenses/mit-license.php
 */

"use strict";

import {adler32, append_record, binary_search, less_than, entry, entry_count, erase, erase_entry, exactly_offset, fill_count, find, find_at_node, grater, insert, insert_to_node, key, lesser, max_entry, min_entry, Node, node_record, read, Record, set_grater, set_key, set_lesser, set_value, split_node, update, update_record, value, grater_than} from "./index";

describe('balanced tree', () => {

	it("accessor", () => {
		const records: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 0, 5, 85, 0, 6, 0, 0, 0,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			]
		};

		expect(lesser(records, 3, 1)).toBe(1);
		expect(key(records, 3, 1)).toBe(25);
		expect(value(records, 3, 1)).toBe(500);
		expect(grater(records, 3, 1)).toBe(2);

		set_lesser(records, 3, 2, 100)
		set_key(records, 3, 2, 200)
		set_value(records, 3, 2, 300)
		set_grater(records, 3, 2, 400)

		expect(lesser(records, 3, 2)).toBe(100);
		expect(key(records, 3, 2)).toBe(200);
		expect(value(records, 3, 2)).toBe(300);
		expect(grater(records, 3, 2)).toBe(400);

	});

	it("entry", () => {
		expect(entry({data: [0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, 1, 1)).toStrictEqual([0, 10, 100, 0])
		expect(entry({data: [0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, 1, 2)).toStrictEqual([0, 20, 200, 0])
		expect(entry({data: [0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, 1, 3)).toStrictEqual([0, 0, 0, 0])
	})

	it("min_entry Max_entry", () => {
		expect(min_entry({data: [0, 10, 100, 0, 20, 200, 0, 30, 300, 0, 40, 400, 0, 50, 500, 0]}, 1)).toStrictEqual([0, 10, 100, 0])
		expect(max_entry({data: [0, 10, 100, 0, 20, 200, 0, 30, 300, 0, 40, 400, 0, 50, 500, 0]}, 1)).toStrictEqual([0, 50, 500, 0])
	})

	it("fill_count", () => {

		const node1: Record = {data: [1, 10, 100, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
		expect(fill_count(node1, 1)).toBe(1);

		const node2: Record = {data: [1, 10, 100, 2, 20, 200, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]};
		expect(fill_count(node2, 1)).toBe(2);

		const node3: Record = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]};
		expect(fill_count(node3, 1)).toBe(3);

		const node4: Record = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 0, 0, 0, 0, 0, 0]};
		expect(fill_count(node4, 1)).toBe(4);

		const node5: Record = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 0, 0, 0]};
		expect(fill_count(node5, 1)).toBe(5);

		const node6: Record = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7]};
		expect(fill_count(node6, 1)).toBe(5);

	})

	it("split_node", () => {

		const node: Node = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]}
		expect(split_node(node)[0]).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
		expect(split_node(node)[1]).toStrictEqual({data: [3, 30, 300, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
		expect(split_node(node)[2]).toStrictEqual({data: [4, 40, 400, 5, 50, 500, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]});

	})

	it("find_at_node", () => {

		const node: Node = {data: [2, 10, 100, 3, 20, 200, 4, 30, 300, 5, 40, 400, 6, 50, 500, 7]};

		expect(find_at_node(node, 1, 5)).toStrictEqual([2, -1]);
		expect(find_at_node(node, 1, 10)).toStrictEqual([1, 100]);
		expect(find_at_node(node, 1, 15)).toStrictEqual([3, -1]);
		expect(find_at_node(node, 1, 20)).toStrictEqual([1, 200]);
		expect(find_at_node(node, 1, 25)).toStrictEqual([4, -1]);
		expect(find_at_node(node, 1, 30)).toStrictEqual([1, 300]);
		expect(find_at_node(node, 1, 35)).toStrictEqual([5, -1]);
		expect(find_at_node(node, 1, 40)).toStrictEqual([1, 400]);
		expect(find_at_node(node, 1, 45)).toStrictEqual([6, -1]);
		expect(find_at_node(node, 1, 50)).toStrictEqual([1, 500]);
		expect(find_at_node(node, 1, 55)).toStrictEqual([7, -1]);

	})

	it('insert_to_node', () => {

		const source: Node = {data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]};

		insert_to_node(source, [1, 10, 100, 2]);
		expect(source).toStrictEqual({data: [1, 10, 100, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
		insert_to_node(source, [2, 20, 200, 3]);
		expect(source).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
		insert_to_node(source, [3, 30, 300, 4]);
		expect(source).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 0, 0, 0, 0, 0, 0]});
		insert_to_node(source, [4, 40, 400, 5]);
		expect(source).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 0, 0, 0]});
		insert_to_node(source, [5, 50, 500, 6]);
		expect(source).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]});
		insert_to_node(source, [6, 60, 600, 7]);
		expect(source).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7]})
		const source1 = insert_to_node({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]}, [0, 800, 2500, 1]);
		expect(source1).toStrictEqual({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 0, 800, 2500, 1]});
		expect(insert_to_node({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]}, [0, 800, 2500, 1])).toStrictEqual({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 0, 800, 2500, 1]});
		const reading = insert_to_node({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]}, [0, 50, 2500, 1]);
		expect(reading).toStrictEqual({data: [0, 50, 2500, 1, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]});
		const trailing = insert_to_node({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]}, [0, 800, 2500, 1]);
		expect(trailing).toStrictEqual({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 0, 800, 2500, 1]});
		const middle = insert_to_node({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]}, [0, 250, 2500, 1]);
		expect(middle).toStrictEqual({data: [2, 100, 1000, 3, 200, 1000, 0, 250, 2500, 1, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]});
		const middle2 = insert_to_node({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]}, [0, 350, 2500, 1]);
		expect(middle2).toStrictEqual({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 0, 350, 2500, 1, 400, 1000, 6, 500, 1000, 7]});
		const same = insert_to_node({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]}, [0, 300, 1000, 1]);
		expect(same).toStrictEqual({data: [2, 100, 1000, 3, 200, 1000, 4, 300, 1000, 5, 400, 1000, 6, 500, 1000, 7]});

	});

	it("split", () => {
		const records: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 650, 5, 85, 850, 6, 105, 1050, 7,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		};

		expect(split_node(node_record(records, 3))[0]).toStrictEqual({data: [1, 25, 500, 2, 45, 600, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
		expect(split_node(node_record(records, 3))[1]).toStrictEqual({data: [4, 65, 650, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
		expect(split_node(node_record(records, 3))[2]).toStrictEqual({data: [5, 85, 850, 6, 105, 1050, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
	});

	it("append", () => {
		const records: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 0, 5, 85, 0, 6, 0, 0, 0,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			]
		};

		expect(append_record(records, {data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 15, 16]})).toBe(7);

		const records2: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 0, 5, 85, 0, 6, 0, 0, 0,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 15, 16
			]
		};

		expect(records).toStrictEqual(records2);

		const records3: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 0, 5, 85, 0, 6, 0, 0, 0,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			]
		};

		update_record(records2, 7, {data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
		expect(records2).toStrictEqual(records3);

	});

	it("less_than", () => {

		const records: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 650, 5, 85, 850, 6, 105, 1050, 7,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		};


		const result = less_than(records, 3, 5);

		console.log(result)
	})


	it("grater_than", () => {

		const records: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 650, 5, 85, 850, 6, 105, 1050, 7,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		};


		const result = grater_than(records, 3, 3);

		console.log(result)
	})


	it("exactly_offset", () => {

		let records: Record = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]};

		const n = exactly_offset(records, 1, 30);

		console.log(n);

	});

	it("erase_entry", () => {

		let records: Record = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]};

		erase_entry(records, 1, 1);

		expect(records).toStrictEqual({data: [2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 0, 0, 0]});

		records = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]};

		erase_entry(records, 1, 2);

		expect(records).toStrictEqual({data: [1, 10, 100, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 0, 0, 0]});

		records = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]};

		erase_entry(records, 1, 3);

		expect(records).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 4, 40, 400, 5, 50, 500, 6, 0, 0, 0]});

		records = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]};

		erase_entry(records, 1, 4);

		expect(records).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 5, 50, 500, 6, 0, 0, 0]});


		records = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]};

		erase_entry(records, 1, 5);

		expect(records).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 6, 0, 0, 0]});


		records = {data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6]};

		erase_entry(records, 1, entry_count);

		expect(records).toStrictEqual({data: [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 6, 0, 0, 0]});

	})

	it("find", () => {
		const records: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 0, 5, 85, 0, 6, 0, 0, 0,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			]
		};

		expect(find(records, [], 3, 40)).toStrictEqual([[3], 2, 400]);
		expect(find(records, [], 3, 41)).toStrictEqual([[3], 2, -1]);

		expect(split_node(node_record(records, 3))[0]).toStrictEqual({data: [1, 25, 500, 2, 45, 600, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]});

		expect(split_node(node_record(records, 3))[1]).toStrictEqual({data: [4, 65, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]});

		expect(split_node(node_record(records, 3))[2]).toStrictEqual({data: [5, 85, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]});

		expect(append_record(records, {data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 15, 16]})).toBe(7);

		const records2: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 0, 5, 85, 0, 6, 0, 0, 0,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 15, 16
			]
		};

		expect(records).toStrictEqual(records2);

		const records3: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 0, 5, 85, 0, 6, 0, 0, 0,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			]
		};

		update_record(records2, 7, {data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]});
		expect(records2).toStrictEqual(records3);

	});

	it('insert and find (seq)', () => {

		const records: Record = {data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]};
		const count = 100;

		for (let data = 1; data < count; data++) {
			insert(records, 1, data, data * 10);
		}

		let each_depth: any[] = [];
		let depth_sum: number = 0;
		for (let data = 1; data < count; data++) {
			const x = find(records, [], 1, data);
			each_depth.push(x[0].length);
			depth_sum += x[0].length;
			expect(x[2]).toBe(data * 10);
		}

		//	console.log(JSON.stringify(each_depth))
		//	console.log(JSON.stringify(records))

		const ave_depth = depth_sum / count;

		let sum = 0;
		for (let index = 1; index < count; index++) {
			sum += (each_depth[index - 1] - ave_depth) ** 2;
		}

		const dispersion = sum / count;

		const space_efficiency = records.data.length / count;

		console.log("ave_depth : " + ave_depth + " dispersion : " + dispersion + " space_efficiency : " + space_efficiency);

	});

	it('insert and find (random)', () => {

		const keys: number[] = [
			973, 974, 763, 977, 23, 21, 28, 860, 782, 760,
			4, 6, 594, 9, 210, 213, 211, 599, 2, 590,
			14, 16, 966, 19, 220, 223, 221, 960, 12, 965,
			214, 216, 37, 219, 969, 961, 968, 779, 982, 5,
			224, 226, 976, 229, 979, 971, 978, 781, 992, 15,
			989, 988, 981, 995, 42, 239, 25, 234, 236, 986,
			990, 35, 249, 246, 997, 212, 1000, 991, 993, 244,
			320, 45, 319, 316, 47, 222, 10, 321, 323, 314,
			324, 331, 333, 232, 218, 330, 329, 326, 217, 20,
			334, 341, 343, 242, 228, 340, 339, 336, 227, 30,
			344, 346, 237, 349, 350, 353, 351, 40, 312, 238,
			354, 356, 247, 359, 360, 363, 361, 215, 322, 248,
			371, 373, 364, 332, 315, 370, 267, 366, 317, 225,
			263, 268, 374, 261, 342, 277, 328, 376, 327, 235,
			325, 335, 368, 284, 369, 372, 289, 358, 286, 357,

			789, 994, 996, 783, 999, 43, 41, 48, 580, 962,
			383, 384, 386, 293, 282, 389, 365, 279, 275, 381,
			34, 32, 985, 36, 980, 17, 39, 240, 243, 241,
			308, 306, 377, 265, 309, 269, 304, 272, 301, 355,
			292, 393, 54, 56, 51, 53, 59, 391, 390, 303,
			302, 401, 394, 396, 285, 399, 408, 400, 380, 375,
			762, 1, 592, 593, 575, 596, 8, 3, 577, 750,
			295, 404, 406, 50, 409, 80, 81, 83, 260, 382,
			298, 345, 378, 294, 379, 262, 299, 291, 296, 367,
			305, 84, 86, 307, 89, 519, 511, 518, 270, 52,
			512, 514, 387, 517, 539, 531, 538, 280, 392, 388,
			44, 46, 27, 49, 313, 311, 318, 769, 972, 998,
			532, 534, 57, 537, 60, 63, 61, 290, 402, 58,
			64, 66, 397, 398, 69, 548, 549, 300, 541, 82,
			542, 544, 559, 407, 405, 547, 558, 385, 551, 513,

			273, 278, 352, 338, 266, 264, 245, 271, 287, 337,
			552, 554, 569, 568, 55, 87, 88, 557, 561, 533,
			562, 564, 639, 638, 395, 516, 515, 567, 631, 62,
			632, 634, 70, 73, 403, 536, 535, 637, 71, 543,
			684, 686, 699, 698, 450, 131, 135, 683, 691, 152,
			694, 696, 673, 675, 490, 143, 145, 693, 678, 162,
			672, 674, 99, 98, 660, 153, 155, 677, 93, 502,
			963, 964, 13, 18, 791, 586, 585, 967, 11, 772,
			283, 288, 274, 348, 276, 281, 362, 297, 347, 310,
			92, 94, 163, 97, 100, 101, 103, 130, 682, 165,
			983, 984, 773, 987, 33, 31, 38, 570, 598, 770,
			104, 106, 507, 109, 113, 508, 119, 140, 692, 118,
			734, 736, 951, 959, 935, 940, 958, 936, 895, 952,
			114, 116, 687, 117, 123, 685, 129, 150, 671, 128,
			124, 126, 697, 127, 183, 695, 180, 160, 91, 181,

			184, 186, 676, 189, 193, 670, 190, 505, 102, 191,
			194, 196, 96, 199, 701, 95, 709, 680, 112, 708,
			704, 706, 107, 703, 605, 108, 606, 690, 122, 600,
			602, 603, 111, 604, 818, 115, 817, 679, 182, 815,
			814, 816, 121, 813, 828, 125, 827, 90, 192, 825,
			824, 826, 187, 823, 840, 841, 848, 105, 702, 188,
			802, 804, 707, 806, 850, 851, 858, 120, 812, 705,
			844, 846, 197, 849, 803, 805, 800, 110, 608, 198,
			613, 614, 811, 629, 628, 625, 195, 842, 617, 810,
			164, 166, 503, 167, 501, 500, 497, 440, 495, 132,
			623, 624, 821, 929, 928, 925, 700, 808, 627, 820,
			854, 856, 601, 859, 619, 618, 615, 185, 822, 609,
			834, 836, 801, 870, 873, 871, 819, 612, 833, 809,
			884, 922, 611, 616, 889, 890, 886, 893, 891, 845,

			664, 523, 433, 432, 663, 139, 666, 133, 138, 205,
			134, 452, 443, 441, 137, 149, 136, 141, 148, 480,
			790, 794, 737, 717, 798, 725, 795, 869, 723, 732,
			874, 876, 883, 853, 879, 881, 880, 857, 829, 622,
			894, 896, 903, 621, 909, 901, 900, 626, 807, 832,
			914, 916, 931, 937, 938, 939, 838, 610, 830, 882,
			904, 906, 913, 921, 919, 911, 910, 926, 855, 872,
			714, 716, 721, 908, 915, 728, 729, 897, 875, 932,
			724, 726, 731, 918, 930, 738, 739, 907, 885, 942,
			24, 26, 7, 29, 506, 233, 231, 970, 22, 975,
			923, 924, 847, 837, 835, 831, 607, 852, 927, 843,
			933, 230, 934, 941, 892, 899, 948, 949, 877, 620,
			953, 878, 954, 946, 898, 749, 741, 748, 839, 912,
			744, 950, 746, 956, 945, 955, 753, 957, 905, 712,

			943, 710, 944, 887, 888, 719, 711, 718, 920, 902,
			74, 947, 76, 67, 68, 170, 173, 171, 85, 553,
			154, 79, 156, 451, 453, 169, 161, 168, 437, 662,
			174, 157, 176, 546, 545, 419, 418, 410, 510, 563,
			144, 179, 146, 526, 525, 159, 151, 158, 427, 492,
			504, 147, 667, 665, 509, 689, 681, 688, 520, 142,
			758, 751, 917, 759, 715, 797, 713, 722, 754, 727,
			414, 411, 556, 415, 259, 258, 253, 530, 633, 555,
			254, 251, 566, 255, 469, 468, 465, 65, 72, 565,
			464, 466, 636, 467, 479, 478, 470, 540, 172, 635,
			474, 476, 77, 475, 647, 645, 643, 550, 416, 78,
			642, 644, 177, 640, 657, 655, 653, 560, 256, 178,
			652, 654, 412, 650, 209, 201, 200, 630, 462, 413,
			204, 206, 472, 250, 252, 208, 483, 488, 489, 75,
			484, 486, 641, 463, 461, 485, 429, 428, 420, 175,

			424, 421, 651, 471, 477, 425, 439, 438, 430, 417,
			434, 431, 202, 648, 646, 435, 449, 448, 445, 257,
			444, 446, 482, 658, 656, 447, 529, 521, 528, 460,
			522, 426, 203, 207, 527, 459, 524, 458, 455, 473,
			454, 436, 481, 487, 457, 499, 456, 491, 498, 649,
			494, 442, 423, 422, 493, 669, 496, 661, 668, 659,
			868, 861, 864, 747, 756, 863, 735, 579, 733, 742,
			578, 571, 574, 757, 796, 573, 745, 589, 743, 752,
			588, 581, 583, 793, 866, 587, 761, 768, 765, 792,
			764, 766, 862, 755, 576, 767, 771, 778, 775, 720,
			774, 776, 572, 799, 584, 777, 787, 785, 780, 730,
			784, 786, 582, 865, 867, 788, 597, 591, 740, 740
		];

		const records: Record = {data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]};

		for (let data = 0; data < keys.length; data++) {
			insert(records, 1, keys[data], keys[data] * 10);
		}

		let each_depth: any[] = [];
		let depth_sum: number = 0;
		for (let data = 0; data < keys.length; data++) {
			const x = find(records, [], 1, keys[data]);
			each_depth.push(x[0].length);
			depth_sum += x[0].length;
			expect(x[2]).toBe(keys[data] * 10);
		}

		// console.log(JSON.stringify(each_depth))
		// console.log(JSON.stringify(records))

		const ave_depth = depth_sum / keys.length;

		let sum = 0;
		for (let index = 0; index < keys.length; index++) {
			sum += (each_depth[index] - ave_depth) ** 2;
		}

		const dispersion = sum / keys.length;

		const space_efficiency = records.data.length / keys.length;

		console.log("ave_depth : " + ave_depth + " dispersion : " + dispersion + " space_efficiency : " + space_efficiency);

	});

	it('insert or update (random)', () => {
		/*
				const keys: number[] = [
					973, 974, 763, 977, 23, 21, 28, 860, 782, 760,
					4, 6, 594, 9, 210, 213, 211, 599, 2, 590,
					14, 16, 966, 19, 220, 223, 221, 960, 12, 965,
					214, 216, 37, 219, 969, 961, 968, 779, 982, 5,
					224, 226, 976, 229, 979, 971, 978, 781, 992, 15,
					989, 988, 981, 995, 42, 239, 25, 234, 236, 986,
					990, 35, 249, 246, 997, 212, 1000, 991, 993, 244,
					320, 45, 319, 316, 47, 222, 10, 321, 323, 314,
					324, 331, 333, 232, 218, 330, 329, 326, 217, 20,
					334, 341, 343, 242, 228, 340, 339, 336, 227, 30,
					344, 346, 237, 349, 350, 353, 351, 40, 312, 238,
					354, 356, 247, 359, 360, 363, 361, 215, 322, 248,
					371, 373, 364, 332, 315, 370, 267, 366, 317, 225,
					263, 268, 374, 261, 342, 277, 328, 376, 327, 235,
					325, 335, 368, 284, 369, 372, 289, 358, 286, 357,

					789, 994, 996, 783, 999, 43, 41, 48, 580, 962,
					383, 384, 386, 293, 282, 389, 365, 279, 275, 381,
					34, 32, 985, 36, 980, 17, 39, 240, 243, 241,
					308, 306, 377, 265, 309, 269, 304, 272, 301, 355,
					292, 393, 54, 56, 51, 53, 59, 391, 390, 303,
					302, 401, 394, 396, 285, 399, 408, 400, 380, 375,
					762, 1, 592, 593, 575, 596, 8, 3, 577, 750,
					295, 404, 406, 50, 409, 80, 81, 83, 260, 382,
					298, 345, 378, 294, 379, 262, 299, 291, 296, 367,
					305, 84, 86, 307, 89, 519, 511, 518, 270, 52,
					512, 514, 387, 517, 539, 531, 538, 280, 392, 388,
					44, 46, 27, 49, 313, 311, 318, 769, 972, 998,
					532, 534, 57, 537, 60, 63, 61, 290, 402, 58,
					64, 66, 397, 398, 69, 548, 549, 300, 541, 82,
					542, 544, 559, 407, 405, 547, 558, 385, 551, 513,

					273, 278, 352, 338, 266, 264, 245, 271, 287, 337,
					552, 554, 569, 568, 55, 87, 88, 557, 561, 533,
					562, 564, 639, 638, 395, 516, 515, 567, 631, 62,
					632, 634, 70, 73, 403, 536, 535, 637, 71, 543,
					684, 686, 699, 698, 450, 131, 135, 683, 691, 152,
					694, 696, 673, 675, 490, 143, 145, 693, 678, 162,
					672, 674, 99, 98, 660, 153, 155, 677, 93, 502,
					963, 964, 13, 18, 791, 586, 585, 967, 11, 772,
					283, 288, 274, 348, 276, 281, 362, 297, 347, 310,
					92, 94, 163, 97, 100, 101, 103, 130, 682, 165,
					983, 984, 773, 987, 33, 31, 38, 570, 598, 770,
					104, 106, 507, 109, 113, 508, 119, 140, 692, 118,
					734, 736, 951, 959, 935, 940, 958, 936, 895, 952,
					114, 116, 687, 117, 123, 685, 129, 150, 671, 128,
					124, 126, 697, 127, 183, 695, 180, 160, 91, 181,

					184, 186, 676, 189, 193, 670, 190, 505, 102, 191,
					194, 196, 96, 199, 701, 95, 709, 680, 112, 708,
					704, 706, 107, 703, 605, 108, 606, 690, 122, 600,
					602, 603, 111, 604, 818, 115, 817, 679, 182, 815,
					814, 816, 121, 813, 828, 125, 827, 90, 192, 825,
					824, 826, 187, 823, 840, 841, 848, 105, 702, 188,
					802, 804, 707, 806, 850, 851, 858, 120, 812, 705,
					844, 846, 197, 849, 803, 805, 800, 110, 608, 198,
					613, 614, 811, 629, 628, 625, 195, 842, 617, 810,
					164, 166, 503, 167, 501, 500, 497, 440, 495, 132,
					623, 624, 821, 929, 928, 925, 700, 808, 627, 820,
					854, 856, 601, 859, 619, 618, 615, 185, 822, 609,
					834, 836, 801, 870, 873, 871, 819, 612, 833, 809,
					884, 922, 611, 616, 889, 890, 886, 893, 891, 845,

					664, 523, 433, 432, 663, 139, 666, 133, 138, 205,
					134, 452, 443, 441, 137, 149, 136, 141, 148, 480,
					790, 794, 737, 717, 798, 725, 795, 869, 723, 732,
					874, 876, 883, 853, 879, 881, 880, 857, 829, 622,
					894, 896, 903, 621, 909, 901, 900, 626, 807, 832,
					914, 916, 931, 937, 938, 939, 838, 610, 830, 882,
					904, 906, 913, 921, 919, 911, 910, 926, 855, 872,
					714, 716, 721, 908, 915, 728, 729, 897, 875, 932,
					724, 726, 731, 918, 930, 738, 739, 907, 885, 942,
					24, 26, 7, 29, 506, 233, 231, 970, 22, 975,
					923, 924, 847, 837, 835, 831, 607, 852, 927, 843,
					933, 230, 934, 941, 892, 899, 948, 949, 877, 620,
					953, 878, 954, 946, 898, 749, 741, 748, 839, 912,
					744, 950, 746, 956, 945, 955, 753, 957, 905, 712,

					943, 710, 944, 887, 888, 719, 711, 718, 920, 902,
					74, 947, 76, 67, 68, 170, 173, 171, 85, 553,
					154, 79, 156, 451, 453, 169, 161, 168, 437, 662,
					174, 157, 176, 546, 545, 419, 418, 410, 510, 563,
					144, 179, 146, 526, 525, 159, 151, 158, 427, 492,
					504, 147, 667, 665, 509, 689, 681, 688, 520, 142,
					758, 751, 917, 759, 715, 797, 713, 722, 754, 727,
					414, 411, 556, 415, 259, 258, 253, 530, 633, 555,
					254, 251, 566, 255, 469, 468, 465, 65, 72, 565,
					464, 466, 636, 467, 479, 478, 470, 540, 172, 635,
					474, 476, 77, 475, 647, 645, 643, 550, 416, 78,
					642, 644, 177, 640, 657, 655, 653, 560, 256, 178,
					652, 654, 412, 650, 209, 201, 200, 630, 462, 413,
					204, 206, 472, 250, 252, 208, 483, 488, 489, 75,
					484, 486, 641, 463, 461, 485, 429, 428, 420, 175,

					424, 421, 651, 471, 477, 425, 439, 438, 430, 417,
					434, 431, 202, 648, 646, 435, 449, 448, 445, 257,
					444, 446, 482, 658, 656, 447, 529, 521, 528, 460,
					522, 426, 203, 207, 527, 459, 524, 458, 455, 473,
					454, 436, 481, 487, 457, 499, 456, 491, 498, 649,
					494, 442, 423, 422, 493, 669, 496, 661, 668, 659,
					868, 861, 864, 747, 756, 863, 735, 579, 733, 742,
					578, 571, 574, 757, 796, 573, 745, 589, 743, 752,
					588, 581, 583, 793, 866, 587, 761, 768, 765, 792,
					764, 766, 862, 755, 576, 767, 771, 778, 775, 720,
					774, 776, 572, 799, 584, 777, 787, 785, 780, 730,
					784, 786, 582, 865, 867, 788, 597, 591, 595, 740
				];
		*/
		const keys: number[] = [
			4215, 8684, 2142, 8553, 762, 651, 9976, 3043, 6304, 5319,
			7518, 7865, 8377, 7105, 7477, 8203, 5764, 437, 6669, 4892,
			4467, 7676, 1356, 1692, 3985, 3918, 6606, 900, 5240, 7227,
			5921, 2268, 2842, 795, 2488, 3061, 7021, 6377, 6049, 387,
			3, 89, 2275, 3992, 4486, 9911, 984, 3199, 1458, 8282,
			317, 1266, 8426, 5556, 2018, 5043, 6617, 8078, 5456, 8292,
			6087, 1341, 3187, 3368, 3525, 6983, 4867, 7960, 4632, 4334,
			6197, 3403, 4128, 8876, 7869, 6297, 4350, 8336, 3846, 7884,
			458, 7968, 9032, 2914, 1739, 6512, 9272, 866, 1012, 3259,
			4839, 988, 8299, 263, 5654, 9513, 7655, 5983, 8459, 2862,
			3192, 2202, 4385, 6943, 3096, 8612, 6683, 1624, 7441, 1352,
			5553, 8440, 4382, 2724, 5431, 9786, 2717, 300, 8228, 7864,
			9449, 1616, 2143, 1491, 7336, 9478, 4281, 3967, 3562, 2830,
			4178, 1297, 3385, 2790, 8107, 8033, 2344, 4954, 3781, 5215,
			9446, 1094, 1058, 1715, 9936, 3770, 8938, 9816, 6798, 1567,
			4611, 5061, 1706, 3010, 9177, 368, 9461, 3281, 2988, 7130,
			4419, 7351, 4302, 4996, 4087, 285, 426, 8963, 198, 1408,
			7008, 1552, 3229, 4866, 792, 3832, 6868, 675, 2959, 3628,
			5717, 4500, 5994, 8752, 5590, 6267, 7768, 3940, 5478, 5102,
			4796, 511, 878, 3376, 425, 4431, 361, 3436, 248, 8599,
			4035, 5718, 3031, 6508, 9689, 1070, 9500, 3917, 3854, 4314,
			4234, 3057, 9897, 8924, 1067, 8017, 6337, 7503, 6235, 1539,
			5753, 1416, 5078, 6333, 9107, 6375, 7069, 534, 1403, 1261,
			3372, 6302, 4976, 1165, 9769, 7001, 5218, 5124, 2821, 8505,
			8653, 5850, 6227, 5908, 5336, 5744, 8908, 7816, 7500, 3014,
			6084, 7332, 1851, 4300, 1830, 5039, 1559, 4900, 6149, 1476,
			3220, 8922, 1472, 1235, 4157, 9337, 2210, 4695, 4563, 3852,
			9200, 1245, 7808, 1827, 4638, 1528, 8576, 1278, 3490, 9923,
			7388, 7734, 4685, 9115, 5457, 6693, 4378, 150, 9168, 836,
			2974, 3585, 3466, 7515, 3799, 4653, 6876, 2749, 957, 9087,
			2688, 4427, 6125, 7320, 5204, 164, 3312, 6123, 2062, 7853,
			8914, 5860, 3049, 8799, 3972, 2875, 7962, 2185, 1174, 4204,
			5845, 3945, 966, 1762, 1115, 4670, 6656, 6135, 8792, 7530,
			5582, 3605, 7516, 4174, 2651, 1286, 547, 734, 9505, 3447,
			8116, 7435, 553, 869, 9970, 9366, 9509, 5347, 1537, 6885,
			3290, 6909, 6463, 3068, 8277, 4625, 4292, 9144, 1686, 2840,
			9811, 1609, 9545, 1718, 3387, 981, 6922, 3115, 6657, 8143,
			622, 9047, 5725, 9679, 7883, 3360, 197, 1798, 1274, 2520,
			1489, 5634, 9357, 698, 229, 8102, 9067, 7439, 8772, 1675,
			7279, 891, 9238, 6094, 3454, 2882, 6414, 1549, 7082, 8532,
			6243, 8920, 3342, 9785, 2800, 8202, 4830, 4871, 7029, 1074,
			5501, 6554, 5493, 1371, 5599, 7794, 4207, 9011, 3727, 2084,
			2916, 5146, 5728, 7347, 9232, 4047, 2839, 8889, 8973, 5036,
			5888, 8378, 5294, 2356, 1995, 3697, 4257, 9356, 7335, 4631,
			5828, 1964, 7449, 4734, 1218, 7304, 1211, 5107, 3713, 2708,
			8964, 3812, 1857, 1026, 6282, 3307, 9293, 7298, 6126, 6200,
			842, 2637, 2534, 1171, 9190, 8654, 1726, 4321, 579, 7689,
			9799, 163, 280, 104, 2178, 2235, 1687, 524, 3637, 7588,
			4515, 8022, 5168, 1097, 1849, 9563, 7924, 1628, 938, 947,
			6296, 545, 5075, 6469, 4840, 4890, 2869, 2939, 4088, 9826,
			564, 9668, 1427, 2761, 378, 4003, 7334, 955, 323, 8761,
			7848, 9063, 599, 8710, 3772, 2550, 3999, 8865, 1924, 5038,
			9459, 3802, 9326, 3396, 4172, 6677, 6587, 2628, 1187, 5278,
			3753, 3197, 7028, 240, 8010, 708, 5669, 7785, 9489, 4502,
			8632, 3437, 3916, 153, 907, 338, 4507, 8319, 1979, 2104,
			3179, 8162, 1252, 3089, 1850, 584, 7760, 4537, 9739, 930,
			8146, 3600, 5737, 9807, 4144, 5366, 3969, 5331, 2852, 9705,
			1290, 7202, 1175, 8991, 2918, 5600, 1494, 8542, 3334, 9778,
			7315, 3922, 1748, 6036, 2153, 4077, 6178, 194, 7934, 1872,
			5694, 1550, 3913, 3537, 5480, 5819, 1396, 6650, 1394, 4327,
			7478, 8264, 4725, 2336, 5074, 127, 142, 808, 3048, 8730,
			1967, 9007, 6648, 4142, 1482, 5435, 8278, 8509, 1121, 9615,
			3388, 2928, 9988, 7519, 9531, 7337, 6662, 9754, 5337, 9044,
			4747, 9072, 6593, 776, 5267, 6674, 1839, 4748, 5808, 3453,
			1226, 307, 3469, 8869, 9035, 911, 672, 4259, 7823, 434,
			7591, 1547, 7265, 3650, 2498, 8829, 1598, 7541, 8201, 5020,
			2256, 6834, 8957, 583, 8732, 1047, 4784, 1541, 2723, 7895,
			4932, 5388, 522, 1445, 8699, 8289, 5073, 5449, 3786, 5205,
			9316, 9981, 1141, 6966, 7359, 2463, 9030, 6888, 6284, 6906,
			778, 8747, 7174, 7281, 6706, 9958, 9794, 1899, 4083, 8461,
			1650, 4767, 459, 3830, 4864, 5506, 3818, 6924, 8492, 5558,
			1485, 1281, 3165, 7759, 1293, 2365, 3859, 5633, 3042, 5915,
			5726, 5334, 2599, 4356, 9950, 1934, 2819, 1722, 7998, 74,
			3027, 6305, 7809, 4664, 137, 834, 6904, 7113, 8290, 3844,
			4478, 9408, 1334, 3909, 9599, 386, 4126, 6419, 420, 3232,
			246, 890, 6714, 7294, 820, 2241, 6131, 6325, 479, 2039,
			4870, 3673, 1312, 8463, 8642, 6055, 2361, 8323, 3103, 7985,
			1510, 958, 9494, 5857, 2418, 5005, 3557, 4697, 8093, 1824,
			275, 6189, 7673, 5143, 3955, 2179, 3296, 3412, 7051, 9836,
			4118, 6418, 5234, 6155, 606, 7091, 4524, 3424, 4307, 8793,
			7783, 2267, 9873, 2161, 1852, 9585, 5591, 2872, 9403, 3529,
			4614, 5788, 9792, 2111, 4971, 7454, 2093, 1455, 4476, 3633,
			7116, 2630, 5083, 8446, 9515, 1791, 4032, 581, 6133, 3371,
			6020, 4133, 668, 6678, 3321, 5883, 9555, 2051, 5852, 2360,
			4407, 623, 357, 3120, 3153, 5263, 7498, 4641, 274, 8344,
			825, 2144, 5709, 5255, 7415, 3819, 7067, 4682, 4616, 5593,
			1253, 839, 6757, 3924, 8841, 5447, 8660, 867, 9071, 7070,
			9429, 8489, 8372, 394, 7442, 7851, 1389, 5875, 9549, 8052,
			4274, 7746, 9276, 7957, 1249, 3003, 821, 4256, 5613, 9202,
			2772, 208, 9885, 4787, 5561, 4678, 2243, 4413, 3081, 4055,
			5153, 2052, 7033, 3257, 5292, 9204, 8152, 7948, 997, 4501,
			631, 2577, 9180, 7885, 8628, 6964, 7589, 4353, 9939, 7321,
			293, 9306, 84, 9307, 497, 3169, 3856, 249, 757, 713, 7401,
			2937, 1090, 9522, 6192, 9045, 8560, 1035, 3162, 9451, 1006,
			3705, 7528, 3414, 6114, 1583, 5358, 6007, 5719, 4153, 5007,
			6162, 7305, 6003, 5732, 3897, 6247, 7919, 8898, 4574, 8619,
			781, 1106, 2101, 489, 2112, 3695, 659, 1104, 5759, 2938,
			9866, 9802, 9771, 9762, 6950, 2738, 4757, 772, 4526, 7999,
			1442, 3056, 4263, 9454, 2137, 2037, 4584, 870, 4151, 6545,
			9355, 1663, 9149, 4436, 3028, 8212, 2883, 4405, 933, 3172];

		const records: Record = {data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]};

		for (let data = 0; data < keys.length; data++) {
			insert(records, 1, keys[data], keys[data] * 10);
		}

		// console.log(JSON.stringify(records))

		for (let data = 0; data < keys.length; data++) {
			update(records, 1, keys[data], keys[data] * 100);
		}

		let each_depth: any[] = [];
		let depth_sum: number = 0;
		for (let data = 0; data < keys.length; data++) {
			const x = find(records, [], 1, keys[data]);
			each_depth.push(x[0].length);
			depth_sum += x[0].length;
			expect(x[2]).toBe(keys[data] * 100);
		}

		const ave_depth = depth_sum / keys.length;
		let sum = 0;
		for (let index = 0; index < keys.length; index++) {
			sum += (each_depth[index] - ave_depth) ** 2;
		}

		const dispersion = sum / keys.length;

		const space_efficiency = records.data.length / keys.length;

		console.log("ave_depth : " + ave_depth + " dispersion : " + dispersion + " space_efficiency : " + space_efficiency);

	});

	it('insert update erase (random)', () => {
		/*
				const keys: number[] = [
					973, 974, 763, 977, 23, 21, 28, 860, 782, 760,
					4, 6, 594, 9, 210, 213, 211, 599, 2, 590,
					14, 16, 966, 19, 220, 223, 221, 960, 12, 965,
					214, 216, 37, 219, 969, 961, 968, 779, 982, 5,
					224, 226, 976, 229, 979, 971, 978, 781, 992, 15,
					989, 988, 981, 995, 42, 239, 25, 234, 236, 986,
					990, 35, 249, 246, 997, 212, 1000, 991, 993, 244,
					320, 45, 319, 316, 47, 222, 10, 321, 323, 314,
					324, 331, 333, 232, 218, 330, 329, 326, 217, 20,
					334, 341, 343, 242, 228, 340, 339, 336, 227, 30,
					344, 346, 237, 349, 350, 353, 351, 40, 312, 238,
					354, 356, 247, 359, 360, 363, 361, 215, 322, 248,
					371, 373, 364, 332, 315, 370, 267, 366, 317, 225,
					263, 268, 374, 261, 342, 277, 328, 376, 327, 235,
					325, 335, 368, 284, 369, 372, 289, 358, 286, 357,

					789, 994, 996, 783, 999, 43, 41, 48, 580, 962,
					383, 384, 386, 293, 282, 389, 365, 279, 275, 381,
					34, 32, 985, 36, 980, 17, 39, 240, 243, 241,
					308, 306, 377, 265, 309, 269, 304, 272, 301, 355,
					292, 393, 54, 56, 51, 53, 59, 391, 390, 303,
					302, 401, 394, 396, 285, 399, 408, 400, 380, 375,
					762, 1, 592, 593, 575, 596, 8, 3, 577, 750,
					295, 404, 406, 50, 409, 80, 81, 83, 260, 382,
					298, 345, 378, 294, 379, 262, 299, 291, 296, 367,
					305, 84, 86, 307, 89, 519, 511, 518, 270, 52,
					512, 514, 387, 517, 539, 531, 538, 280, 392, 388,
					44, 46, 27, 49, 313, 311, 318, 769, 972, 998,
					532, 534, 57, 537, 60, 63, 61, 290, 402, 58,
					64, 66, 397, 398, 69, 548, 549, 300, 541, 82,
					542, 544, 559, 407, 405, 547, 558, 385, 551, 513,

					273, 278, 352, 338, 266, 264, 245, 271, 287, 337,
					552, 554, 569, 568, 55, 87, 88, 557, 561, 533,
					562, 564, 639, 638, 395, 516, 515, 567, 631, 62,
					632, 634, 70, 73, 403, 536, 535, 637, 71, 543,
					684, 686, 699, 698, 450, 131, 135, 683, 691, 152,
					694, 696, 673, 675, 490, 143, 145, 693, 678, 162,
					672, 674, 99, 98, 660, 153, 155, 677, 93, 502,
					963, 964, 13, 18, 791, 586, 585, 967, 11, 772,
					283, 288, 274, 348, 276, 281, 362, 297, 347, 310,
					92, 94, 163, 97, 100, 101, 103, 130, 682, 165,
					983, 984, 773, 987, 33, 31, 38, 570, 598, 770,
					104, 106, 507, 109, 113, 508, 119, 140, 692, 118,
					734, 736, 951, 959, 935, 940, 958, 936, 895, 952,
					114, 116, 687, 117, 123, 685, 129, 150, 671, 128,
					124, 126, 697, 127, 183, 695, 180, 160, 91, 181,

					184, 186, 676, 189, 193, 670, 190, 505, 102, 191,
					194, 196, 96, 199, 701, 95, 709, 680, 112, 708,
					704, 706, 107, 703, 605, 108, 606, 690, 122, 600,
					602, 603, 111, 604, 818, 115, 817, 679, 182, 815,
					814, 816, 121, 813, 828, 125, 827, 90, 192, 825,
					824, 826, 187, 823, 840, 841, 848, 105, 702, 188,
					802, 804, 707, 806, 850, 851, 858, 120, 812, 705,
					844, 846, 197, 849, 803, 805, 800, 110, 608, 198,
					613, 614, 811, 629, 628, 625, 195, 842, 617, 810,
					164, 166, 503, 167, 501, 500, 497, 440, 495, 132,
					623, 624, 821, 929, 928, 925, 700, 808, 627, 820,
					854, 856, 601, 859, 619, 618, 615, 185, 822, 609,
					834, 836, 801, 870, 873, 871, 819, 612, 833, 809,
					884, 922, 611, 616, 889, 890, 886, 893, 891, 845,

					664, 523, 433, 432, 663, 139, 666, 133, 138, 205,
					134, 452, 443, 441, 137, 149, 136, 141, 148, 480,
					790, 794, 737, 717, 798, 725, 795, 869, 723, 732,
					874, 876, 883, 853, 879, 881, 880, 857, 829, 622,
					894, 896, 903, 621, 909, 901, 900, 626, 807, 832,
					914, 916, 931, 937, 938, 939, 838, 610, 830, 882,
					904, 906, 913, 921, 919, 911, 910, 926, 855, 872,
					714, 716, 721, 908, 915, 728, 729, 897, 875, 932,
					724, 726, 731, 918, 930, 738, 739, 907, 885, 942,
					24, 26, 7, 29, 506, 233, 231, 970, 22, 975,
					923, 924, 847, 837, 835, 831, 607, 852, 927, 843,
					933, 230, 934, 941, 892, 899, 948, 949, 877, 620,
					953, 878, 954, 946, 898, 749, 741, 748, 839, 912,
					744, 950, 746, 956, 945, 955, 753, 957, 905, 712,

					943, 710, 944, 887, 888, 719, 711, 718, 920, 902,
					74, 947, 76, 67, 68, 170, 173, 171, 85, 553,
					154, 79, 156, 451, 453, 169, 161, 168, 437, 662,
					174, 157, 176, 546, 545, 419, 418, 410, 510, 563,
					144, 179, 146, 526, 525, 159, 151, 158, 427, 492,
					504, 147, 667, 665, 509, 689, 681, 688, 520, 142,
					758, 751, 917, 759, 715, 797, 713, 722, 754, 727,
					414, 411, 556, 415, 259, 258, 253, 530, 633, 555,
					254, 251, 566, 255, 469, 468, 465, 65, 72, 565,
					464, 466, 636, 467, 479, 478, 470, 540, 172, 635,
					474, 476, 77, 475, 647, 645, 643, 550, 416, 78,
					642, 644, 177, 640, 657, 655, 653, 560, 256, 178,
					652, 654, 412, 650, 209, 201, 200, 630, 462, 413,
					204, 206, 472, 250, 252, 208, 483, 488, 489, 75,
					484, 486, 641, 463, 461, 485, 429, 428, 420, 175,

					424, 421, 651, 471, 477, 425, 439, 438, 430, 417,
					434, 431, 202, 648, 646, 435, 449, 448, 445, 257,
					444, 446, 482, 658, 656, 447, 529, 521, 528, 460,
					522, 426, 203, 207, 527, 459, 524, 458, 455, 473,
					454, 436, 481, 487, 457, 499, 456, 491, 498, 649,
					494, 442, 423, 422, 493, 669, 496, 661, 668, 659,
					868, 861, 864, 747, 756, 863, 735, 579, 733, 742,
					578, 571, 574, 757, 796, 573, 745, 589, 743, 752,
					588, 581, 583, 793, 866, 587, 761, 768, 765, 792,
					764, 766, 862, 755, 576, 767, 771, 778, 775, 720,
					774, 776, 572, 799, 584, 777, 787, 785, 780, 730,
					784, 786, 582, 865, 867, 788, 597, 591, 595, 740
				];
		*/
		const keys: number[] = [
			4215, 8684, 2142, 8553, 762, 651, 9976, 3043, 6304, 5319,
			7518, 7865, 8377, 7105, 7477, 8203, 5764, 437, 6669, 4892,
			4467, 7676, 1356, 1692,

			3985,
		/*3918, 6606, 900, 5240, 7227,
			5921, 2268, 2842, 795, 2488, 3061, 7021, 6377, 6049, 387,
			3, 89, 2275, 3992, 4486, 9911, 984, 3199, 1458, 8282,
			317, 1266, 8426, 5556, 2018, 5043, 6617, 8078, 5456, 8292,
			6087, 1341, 3187, 3368, 3525, 6983, 4867, 7960, 4632, 4334,
			6197, 3403, 4128, 8876, 7869, 6297, 4350, 8336, 3846, 7884,
			458, 7968, 9032, 2914, 1739, 6512, 9272, 866, 1012, 3259,
			4839, 988, 8299, 263, 5654, 9513, 7655, 5983, 8459, 2862,
			3192, 2202, 4385, 6943, 3096, 8612, 6683, 1624, 7441, 1352,
			5553, 8440, 4382, 2724, 5431, 9786, 2717, 300, 8228, 7864,
			9449, 1616, 2143, 1491, 7336, 9478, 4281, 3967, 3562, 2830,
			4178, 1297, 3385, 2790, 8107, 8033, 2344, 4954, 3781, 5215,
			9446, 1094, 1058, 1715, 9936, 3770, 8938, 9816, 6798, 1567,
			4611, 5061, 1706, 3010, 9177, 368, 9461, 3281, 2988, 7130,
			4419, 7351, 4302, 4996, 4087, 285, 426, 8963, 198, 1408,
			7008, 1552, 3229, 4866, 792, 3832, 6868, 675, 2959, 3628,
			5717, 4500, 5994, 8752, 5590, 6267, 7768, 3940, 5478, 5102,
			4796, 511, 878, 3376, 425, 4431, 361, 3436, 248, 8599,
			4035, 5718, 3031, 6508, 9689, 1070, 9500, 3917, 3854, 4314,
			4234, 3057, 9897, 8924, 1067, 8017, 6337, 7503, 6235, 1539,
			5753, 1416, 5078, 6333, 9107, 6375, 7069, 534, 1403, 1261,
			3372, 6302, 4976, 1165, 9769, 7001, 5218, 5124, 2821, 8505,
			8653, 5850, 6227, 5908, 5336, 5744, 8908, 7816, 7500, 3014,
			6084, 7332, 1851, 4300, 1830, 5039, 1559, 4900, 6149, 1476,
			3220, 8922, 1472, 1235, 4157, 9337, 2210, 4695, 4563, 3852,
			9200, 1245, 7808, 1827, 4638, 1528, 8576, 1278, 3490, 9923,
			7388, 7734, 4685, 9115, 5457, 6693, 4378, 150, 9168, 836,
			2974, 3585, 3466, 7515, 3799, 4653, 6876, 2749, 957, 9087,
			2688, 4427, 6125, 7320, 5204, 164, 3312, 6123, 2062, 7853,
			8914, 5860, 3049, 8799, 3972, 2875, 7962, 2185, 1174, 4204,
			5845, 3945, 966, 1762, 1115, 4670, 6656, 6135, 8792, 7530,
			5582, 3605, 7516, 4174, 2651, 1286, 547, 734, 9505, 3447,
			8116, 7435, 553, 869, 9970, 9366, 9509, 5347, 1537, 6885,
			3290, 6909, 6463, 3068, 8277, 4625, 4292, 9144, 1686, 2840,
			9811, 1609, 9545, 1718, 3387, 981, 6922, 3115, 6657, 8143,
			622, 9047, 5725, 9679, 7883, 3360, 197, 1798, 1274, 2520,
			1489, 5634, 9357, 698, 229, 8102, 9067, 7439, 8772, 1675,
			7279, 891, 9238, 6094, 3454, 2882, 6414, 1549, 7082, 8532,
			6243, 8920, 3342, 9785, 2800, 8202, 4830, 4871, 7029, 1074,
			5501, 6554, 5493, 1371, 5599, 7794, 4207, 9011, 3727, 2084,
			2916, 5146, 5728, 7347, 9232, 4047, 2839, 8889, 8973, 5036,
			5888, 8378, 5294, 2356, 1995, 3697, 4257, 9356, 7335, 4631,
			5828, 1964, 7449, 4734, 1218, 7304, 1211, 5107, 3713, 2708,
			8964, 3812, 1857, 1026, 6282, 3307, 9293, 7298, 6126, 6200,
			842, 2637, 2534, 1171, 9190, 8654, 1726, 4321, 579, 7689,
			9799, 163, 280, 104, 2178, 2235, 1687, 524, 3637, 7588,
			4515, 8022, 5168, 1097, 1849, 9563, 7924, 1628, 938, 947,
			6296, 545, 5075, 6469, 4840, 4890, 2869, 2939, 4088, 9826,
			564, 9668, 1427, 2761, 378, 4003, 7334, 955, 323, 8761,
			7848, 9063, 599, 8710, 3772, 2550, 3999, 8865, 1924, 5038,
			9459, 3802, 9326, 3396, 4172, 6677, 6587, 2628, 1187, 5278,
			3753, 3197, 7028, 240, 8010, 708, 5669, 7785, 9489, 4502,
			8632, 3437, 3916, 153, 907, 338, 4507, 8319, 1979, 2104,
			3179, 8162, 1252, 3089, 1850, 584, 7760, 4537, 9739, 930,
			8146, 3600, 5737, 9807, 4144, 5366, 3969, 5331, 2852, 9705,
			1290, 7202, 1175, 8991, 2918, 5600, 1494, 8542, 3334, 9778,
			7315, 3922, 1748, 6036, 2153, 4077, 6178, 194, 7934, 1872,
			5694, 1550, 3913, 3537, 5480, 5819, 1396, 6650, 1394, 4327,
			7478, 8264, 4725, 2336, 5074, 127, 142, 808, 3048, 8730,
			1967, 9007, 6648, 4142, 1482, 5435, 8278, 8509, 1121, 9615,
			3388, 2928, 9988, 7519, 9531, 7337, 6662, 9754, 5337, 9044,
			4747, 9072, 6593, 776, 5267, 6674, 1839, 4748, 5808, 3453,
			1226, 307, 3469, 8869, 9035, 911, 672, 4259, 7823, 434,
			7591, 1547, 7265, 3650, 2498, 8829, 1598, 7541, 8201, 5020,
			2256, 6834, 8957, 583, 8732, 1047, 4784, 1541, 2723, 7895,
			4932, 5388, 522, 1445, 8699, 8289, 5073, 5449, 3786, 5205,
			9316, 9981, 1141, 6966, 7359, 2463, 9030, 6888, 6284, 6906,
			778, 8747, 7174, 7281, 6706, 9958, 9794, 1899, 4083, 8461,
			1650, 4767, 459, 3830, 4864, 5506, 3818, 6924, 8492, 5558,
			1485, 1281, 3165, 7759, 1293, 2365, 3859, 5633, 3042, 5915,
			5726, 5334, 2599, 4356, 9950, 1934, 2819, 1722, 7998, 74,
			3027, 6305, 7809, 4664, 137, 834, 6904, 7113, 8290, 3844,
			4478, 9408, 1334, 3909, 9599, 386, 4126, 6419, 420, 3232,
			246, 890, 6714, 7294, 820, 2241, 6131, 6325, 479, 2039,
			4870, 3673, 1312, 8463, 8642, 6055, 2361, 8323, 3103, 7985,
			1510, 958, 9494, 5857, 2418, 5005, 3557, 4697, 8093, 1824,
			275, 6189, 7673, 5143, 3955, 2179, 3296, 3412, 7051, 9836,
			4118, 6418, 5234, 6155, 606, 7091, 4524, 3424, 4307, 8793,
			7783, 2267, 9873, 2161, 1852, 9585, 5591, 2872, 9403, 3529,
			4614, 5788, 9792, 2111, 4971, 7454, 2093, 1455, 4476, 3633,
			7116, 2630, 5083, 8446, 9515, 1791, 4032, 581, 6133, 3371,
			6020, 4133, 668, 6678, 3321, 5883, 9555, 2051, 5852, 2360,
			4407, 623, 357, 3120, 3153, 5263, 7498, 4641, 274, 8344,
			825, 2144, 5709, 5255, 7415, 3819, 7067, 4682, 4616, 5593,
			1253, 839, 6757, 3924, 8841, 5447, 8660, 867, 9071, 7070,
			9429, 8489, 8372, 394, 7442, 7851, 1389, 5875, 9549, 8052,
			4274, 7746, 9276, 7957, 1249, 3003, 821, 4256, 5613, 9202,
			2772, 208, 9885, 4787, 5561, 4678, 2243, 4413, 3081, 4055,
			5153, 2052, 7033, 3257, 5292, 9204, 8152, 7948, 997, 4501,
			631, 2577, 9180, 7885, 8628, 6964, 7589, 4353, 9939, 7321,
			293, 9306, 84, 9307, 497, 3169, 3856, 249, 757, 713, 7401,
			2937, 1090, 9522, 6192, 9045, 8560, 1035, 3162, 9451, 1006,
			3705, 7528, 3414, 6114, 1583, 5358, 6007, 5719, 4153, 5007,
			6162, 7305, 6003, 5732, 3897, 6247, 7919, 8898, 4574, 8619,
			781, 1106, 2101, 489, 2112, 3695, 659, 1104, 5759, 2938,
			9866, 9802, 9771, 9762, 6950, 2738, 4757, 772, 4526, 7999,
			1442, 3056, 4263, 9454, 2137, 2037, 4584, 870, 4151, 6545,
			9355, 1663, 9149, 4436, 3028, 8212, 2883, 4405, 933, 3172 */
			];


		const records: Record = {data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]};

		for (let data = 0; data < keys.length; data++) {
			expect(insert(records, 1, keys[data], keys[data] * 10)).toBeTruthy();
		//	console.log(JSON.stringify(records))
			expect(find(records, [], 1, keys[data])[2]).toBe(keys[data] * 10);
		}

		for (let data = 0; data < keys.length; data++) {
			expect(update(records, 1, keys[data], keys[data] * 100)).toBeTruthy();
			expect(find(records, [], 1, keys[data])[2]).toBe(keys[data] * 100);
		}

		for (let data = 0; data < keys.length; data++) {
			erase(records, 1, keys[data]);

			console.log( keys[data], JSON.stringify(records))
	//		expect(find(records, [], 1, keys[data])[2]).toBe(-1);
		}

	//	console.log(JSON.stringify(records))
	});

	it("erase 1", () => {

		const records: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 650, 5, 85, 850, 6, 105, 1050, 7,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		};

		const result = erase(records, 3, 50);

		const result1: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 650, 5, 85, 850, 6, 105, 1050, 7,
				0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		}

		expect(records).toStrictEqual(result1);


	})

	it("erase 2", () => {

		const records: Record = {
			data: [
				0, 10, 100, 0, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 30, 300, 0, 40, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				1, 25, 500, 2, 45, 600, 4, 65, 650, 5, 85, 850, 6, 105, 1050, 7,
				0, 50, 500, 0, 60, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 70, 700, 0, 80, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 90, 900, 0, 100, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		};

		const result = erase(records, 3, 65);
		expect(find(records, [], 1, 65)).toStrictEqual([[], 1, -1]);

		/*
		const result1:Record = {data:[
			0, 10, 100, 0,  20,  200, 0,  0,   0, 0,  0,   0, 0,   0,    0, 0,
			0, 30, 300, 0,  40,  400, 0,  0,   0, 0,  0,   0, 0,   0,    0, 0,
			1, 25, 500, 2,  45,  600, 4, 60, 600, 5, 85, 850, 6, 105, 1050, 7,
			0, 50, 500, 0,   0,    0, 0,  0,   0, 0,  0,   0, 0,   0,    0, 0,
			0, 70, 700, 0,  80,  800, 0,  0,   0, 0,  0,   0, 0,   0,    0, 0,
			0, 90, 900, 0, 100, 1000, 0,  0,   0, 0,  0,   0, 0,   0,    0, 0]}

		expect(records).toStrictEqual(result1);
*/
	})
});

describe('example', () => {

	it('test', () => {

		let a = 0;

		const startTime = new Date().getTime();

		for (let index1 = 0; index1 < 1000000000; index1++) {
			a = index1 * 1000;
		}

		const endTime = new Date().getTime();

		console.log((endTime - startTime), a);

	});

	it('binary_search 1', () => {

		const s = [1, 2, 3, 6, 7, 8, 9, 11, 14, 15, 17, 19, 26];

		expect(binary_search(s, 1)).toBe(0);
		expect(binary_search(s, 2)).toBe(1);
		expect(binary_search(s, 3)).toBe(2);
		expect(binary_search(s, 6)).toBe(3);
		expect(binary_search(s, 7)).toBe(4);
		expect(binary_search(s, 8)).toBe(5);
		expect(binary_search(s, 9)).toBe(6);
		expect(binary_search(s, 11)).toBe(7);
		expect(binary_search(s, 14)).toBe(8);
		expect(binary_search(s, 15)).toBe(9);
		expect(binary_search(s, 17)).toBe(10);
		expect(binary_search(s, 19)).toBe(11);

		expect(binary_search(s, 1, -1)).toBe(0);
		expect(binary_search(s, 2, 1)).toBe(1);
		expect(binary_search(s, 3, 1)).toBe(2);
		expect(binary_search(s, 6, -1)).toBe(3);
		expect(binary_search(s, 7, 1)).toBe(4);
		expect(binary_search(s, 8)).toBe(5);
		expect(binary_search(s, 9)).toBe(6);
		expect(binary_search(s, 11)).toBe(7);
		expect(binary_search(s, 14)).toBe(8);
		expect(binary_search(s, 15)).toBe(9);
		expect(binary_search(s, 17)).toBe(10);
		expect(binary_search(s, 19)).toBe(11);

		expect(binary_search(s, 4)).toBe(-1);
		expect(binary_search(s, 5)).toBe(-1);
		expect(binary_search(s, 10)).toBe(-1);
		expect(binary_search(s, 12)).toBe(-1);
		expect(binary_search(s, 13)).toBe(-1);
		expect(binary_search(s, 16)).toBe(-1);
		expect(binary_search(s, 18)).toBe(-1);
		expect(binary_search(s, 25)).toBe(-1);

		expect(binary_search(s, 4, -1)).toBe(2);
		expect(binary_search(s, 5, -1)).toBe(2);
		expect(binary_search(s, 10, -1)).toBe(6)
		expect(binary_search(s, 12, -1)).toBe(7);
		expect(binary_search(s, 13, -1)).toBe(7);
		expect(binary_search(s, 16, -1)).toBe(9);
		expect(binary_search(s, 18, -1)).toBe(10);
		expect(binary_search(s, 20, -1)).toBe(11);
		expect(binary_search(s, 22, -1)).toBe(11);
		expect(binary_search(s, 25, -1)).toBe(11);
		expect(binary_search(s, 27, -1)).toBe(12);

		expect(binary_search(s, 4, 1)).toBe(3);
		expect(binary_search(s, 5, 1)).toBe(3);
		expect(binary_search(s, 10, 1)).toBe(7)
		expect(binary_search(s, 12, 1)).toBe(8);
		expect(binary_search(s, 13, 1)).toBe(8);
		expect(binary_search(s, 16, 1)).toBe(10);
		expect(binary_search(s, 18, 1)).toBe(11);
		expect(binary_search(s, 20, 1)).toBe(12);
		expect(binary_search(s, 22, 1)).toBe(12);
		expect(binary_search(s, 25, 1)).toBe(12);
		expect(binary_search(s, 27, 1)).toBe(13);

	})

	it('binary_search 2', () => {

		const s: number[] = [
			3,
			74,
			84,
			89,
			104,
			127,
			137,
			142,
			150,
			153,

			163,
			164,
			194,
			197,
			198,
			208,
			229,
			240,
			246,
			248,

			249,
			263,
			274,
			275,
			280,
			285,
			293,
			300,
			307,
			317,
			323,

			338,
			357,
			361,
			368,
			378,
			386,
			387,
			394,
			420,
			425,
			426,

			434,
			437,
			458,
			459,
			479,
			489,
			497,
			511,
			522,
			524,
			534,

			545,
			547,
			553,
			564,
			579,
			581,
			583,
			584,
			599,
			606,
			622,

			623,
			631,
			651,
			659,
			668,
			672,
			675,
			698,
			708,
			713,

			734,
			757,
			762,
			772,
			776,
			778,
			781,
			792,
			795,
			808,
			820,

			821,
			825,
			834,
			836,
			839,
			842,
			866,
			867,
			869,
			870,

			878,
			890,
			891,
			900,
			907,
			911,
			930,
			933,
			938,
			947,
			955,

			957,
			958,
			966,
			981,
			984,
			988,
			997,
			1006,
			1012,
			1026,

			1035,
			1047,
			1058,
			1067,
			1070,
			1074,
			1090,
			1094,
			1097,
			1104,
			1106,

			1115,
			1121,
			1141,
			1165,
			1171,
			1174,
			1175,
			1187,
			1211,
			1218,
			1226,

			1235,
			1245,
			1249,
			1252,
			1253,
			1261,
			1266,
			1274,
			1278,
			1281,
			1286,

			1290,
			1293,
			1297,
			1312,
			1334,
			1341,
			1352,
			1356,
			1371,
			1389,
			1394,

			1396,
			1403,
			1408,
			1416,
			1427,
			1442,
			1445,
			1455,
			1458,
			1472,
			1476,

			1482,
			1485,
			1489,
			1491,
			1494,
			1510,
			1528,
			1537,
			1539,
			1541,
			1547,

			1549,
			1550,
			1552,
			1559,
			1567,
			1583,
			1598,
			1609,
			1616,
			1624,
			1628,

			1650,
			1663,
			1675,
			1686,
			1687,
			1692,
			1706,
			1715,
			1718,
			1722,
			1726,

			1739,
			1748,
			1762,
			1791,
			1798,
			1824,
			1827,
			1830,
			1839,
			1849,
			1850,

			1851,
			1852,
			1857,
			1872,
			1899,
			1924,
			1934,
			1964,
			1967,
			1979,
			1995,

			2018,
			2037,
			2039,
			2051,
			2052,
			2062,
			2084,
			2093,
			2101,
			2104,
			2111,

			2112,
			2137,
			2142,
			2143,
			2144,
			2153,
			2161,
			2178,
			2179,
			2185,
			2202,

			2210,
			2235,
			2241,
			2243,
			2256,
			2267,
			2268,
			2275,
			2336,
			2344,
			2356,

			2360,
			2361,
			2365,
			2418,
			2463,
			2488,
			2498,
			2520,
			2534,
			2550,
			2577,

			2599,
			2628,
			2630,
			2637,
			2651,
			2688,
			2708,
			2717,
			2723,
			2724,
			2738,

			2749,
			2761,
			2772,
			2790,
			2800,
			2819,
			2821,
			2830,
			2839,
			2840,
			2842,
			2852,

			2862,
			2869,
			2872,
			2875,
			2882,
			2883,
			2914,
			2916,
			2918,
			2928,
			2937,

			2938,
			2939,
			2959,
			2974,
			2988,
			3003,
			3010,
			3014,
			3027,
			3028,
			3031,

			3042,
			3043,
			3048,
			3049,
			3056,
			3057,
			3061,
			3068,
			3081,
			3089,
			3096,
			3103,

			3115,
			3120,
			3153,
			3162,
			3165,
			3169,
			3172,
			3179,
			3187,
			3192,
			3197,

			3199,
			3220,
			3229,
			3232,
			3257,
			3259,
			3281,
			3290,
			3296,
			3307,
			3312,

			3321,
			3334,
			3342,
			3360,
			3368,
			3371,
			3372,
			3376,
			3385,
			3387,
			3388,

			3396,
			3403,
			3412,
			3414,
			3424,
			3436,
			3437,
			3447,
			3453,
			3454,
			3466,
			3469,
			3490,

			3525,
			3529,
			3537,
			3557,
			3562,
			3585,
			3600,
			3605,
			3628,
			3633,

			3637,
			3650,
			3673,
			3695,
			3697,
			3705,
			3713,
			3727,
			3753,
			3770,
			3772,

			3781,
			3786,
			3799,
			3802,
			3812,
			3818,
			3819,
			3830,
			3832,
			3844,
			3846,

			3852,
			3854,
			3856,
			3859,
			3897,
			3909,
			3913,
			3916,
			3917,
			3918,
			3922,

			3924,
			3940,
			3945,
			3955,
			3967,
			3969,
			3972,
			3985,
			3992,
			3999,
			4003,

			4032,
			4035,
			4047,
			4055,
			4077,
			4083,
			4087,
			4088,
			4118,
			4126,
			4128,

			4133,
			4142,
			4144,
			4151,
			4153,
			4157,
			4172,
			4174,
			4178,
			4204,
			4207,

			4234,
			4256,
			4257,
			4259,
			4263,
			4274,
			4281,
			4292,
			4300,
			4302,
			4307,

			4314,
			4321,
			4327,
			4334,
			4350,
			4353,
			4356,
			4378,
			4382,
			4385,
			4405,

			4407,
			4413,
			4419,
			4427,
			4431,
			4436,
			4467,
			4476,
			4478,
			4486,

			4500,
			4501,
			4502,
			4507,
			4515,
			4524,
			4526,
			4537,
			4563,
			4574,
			4584,

			4611,
			4614,
			4616,
			4625,
			4631,
			4632,
			4638,
			4641,
			4653,
			4664,
			4670,
			4678,
			4682,
			4685,
			4695,
			4697,
			4725,
			4734,
			4747,
			4748,
			4757,
			4767,
			4784,
			4787,
			4796,
			4830,
			4839,
			4840,
			4864,
			4866,
			4867,
			4870,
			4871,
			4890,
			4892,
			4900,
			4932,
			4954,
			4971,
			4976,
			4996,
			5005,
			5007,
			5020,
			5036,
			5038,
			5039,
			5043,
			5061,
			5073,
			5074,
			5075,
			5078,
			5083,
			5102,
			5107,
			5124,
			5143,
			5146,
			5153,
			5168,
			5204,
			5205,
			5215,
			5218,
			5234,
			5240,
			5255,
			5263,
			5267,
			5278,
			5292,
			5294,
			5319,
			5331,
			5334,
			5336,
			5337,
			5347,
			5358,
			5366,
			5388,
			5431,
			5435,
			5447,
			5449,
			5456,
			5457,
			5478,
			5480,
			5493,
			5501,
			5506,
			5553,
			5556,
			5558,
			5561,
			5582,
			5590,
			5591,
			5593,
			5599,
			5600,
			5613,
			5633,
			5634,
			5654,
			5669,
			5694,
			5709,
			5717,
			5718,
			5719,
			5725,
			5726,
			5728,
			5732,
			5737,
			5744,
			5753,
			5759,
			5764,
			5788,
			5808,
			5819,
			5828,
			5845,
			5850,
			5852,
			5857,
			5860,
			5875,
			5883,
			5888,
			5908,
			5915,
			5921,
			5983,
			5994,
			6003,
			6007,
			6020,
			6036,
			6049,
			6055,
			6084,
			6087,
			6094,
			6114,
			6123,
			6125,
			6126,
			6131,
			6133,
			6135,
			6149,
			6155,
			6162,
			6178,
			6189,
			6192,
			6197,
			6200,
			6227,
			6235,
			6243,
			6247,
			6267,
			6282,
			6284,
			6296,
			6297,
			6302,
			6304,
			6305,
			6325,
			6333,
			6337,
			6375,
			6377,
			6414,
			6418,
			6419,
			6463,
			6469,
			6508,
			6512,
			6545,
			6554,
			6587,
			6593,
			6606,
			6617,
			6648,
			6650,
			6656,
			6657,
			6662,
			6669,
			6674,
			6677,
			6678,
			6683,
			6693,
			6706,
			6714,
			6757,
			6798,
			6834,
			6868,
			6876,
			6885,
			6888,
			6904,
			6906,
			6909,
			6922,
			6924,
			6943,
			6950,
			6964,
			6966,
			6983,
			7001,
			7008,
			7021,
			7028,
			7029,
			7033,
			7051,
			7067,
			7069,
			7070,
			7082,
			7091,
			7105,
			7113,
			7116,
			7130,
			7174,
			7202,
			7227,
			7265,
			7279,
			7281,
			7294,
			7298,
			7304,
			7305,
			7315,
			7320,
			7321,
			7332,
			7334,
			7335,
			7336,
			7337,
			7347,
			7351,
			7359,
			7388,
			7401,
			7415,
			7435,
			7439,
			7441,
			7442,
			7449,
			7454,
			7477,
			7478,
			7498,
			7500,
			7503,
			7515,
			7516,
			7518,
			7519,
			7528,
			7530,
			7541,
			7588,
			7589,
			7591,
			7655,
			7673,
			7676,
			7689,
			7734,
			7746,
			7759,
			7760,
			7768,
			7783,
			7785,
			7794,
			7808,
			7809,
			7816,
			7823,
			7848,
			7851,
			7853,
			7864,
			7865,
			7869,
			7883,
			7884,
			7885,
			7895,
			7919,
			7924,
			7934,
			7948,
			7957,
			7960,
			7962,
			7968,
			7985,
			7998,
			7999,
			8010,
			8017,
			8022,
			8033,
			8052,
			8078,
			8093,
			8102,
			8107,
			8116,
			8143,
			8146,
			8152,
			8162,
			8201,
			8202,
			8203,
			8212,
			8228,
			8264,
			8277,
			8278,
			8282,
			8289,
			8290,
			8292,
			8299,
			8319,
			8323,
			8336,
			8344,
			8372,
			8377,
			8378,
			8426,
			8440,
			8446,
			8459,
			8461,
			8463,
			8489,
			8492,
			8505,
			8509,
			8532,
			8542,
			8553,
			8560,
			8576,
			8599,
			8612,
			8619,
			8628,
			8632,
			8642,
			8653,
			8654,
			8660,
			8684,
			8699,
			8710,
			8730,
			8732,
			8747,
			8752,
			8761,
			8772,
			8792,
			8793,
			8799,
			8829,
			8841,
			8865,
			8869,
			8876,
			8889,
			8898,
			8908,
			8914,
			8920,
			8922,
			8924,
			8938,
			8957,
			8963,
			8964,
			8973,
			8991,
			9007,
			9011,
			9030,
			9032,
			9035,
			9044,
			9045,
			9047,
			9063,
			9067,
			9071,
			9072,
			9087,
			9107,
			9115,
			9144,
			9149,
			9168,
			9177,
			9180,
			9190,
			9200,
			9202,
			9204,
			9232,
			9238,
			9272,
			9276,
			9293,
			9306,
			9307,
			9316,
			9326,
			9337,
			9355,
			9356,
			9357,
			9366,
			9403,
			9408,
			9429,
			9446,
			9449,
			9451,
			9454,
			9459,
			9461,
			9478,
			9489,
			9494,
			9500,
			9505,
			9509,
			9513,
			9515,
			9522,
			9531,
			9545,
			9549,
			9555,
			9563,
			9585,
			9599,
			9615,
			9668,
			9679,
			9689,
			9705,
			9739,
			9754,
			9762,
			9769,
			9771,
			9778,
			9785,
			9786,
			9792,
			9794,
			9799,
			9802,
			9807,
			9811,
			9816,
			9826,
			9836,
			9866,
			9873,
			9885,
			9897,
			9911,
			9923,
			9936,
			9939,
			9950,
			9958,
			9970,
			9976,
			9981,
			9988];

		for (let data = 0; data < s.length - 1; data++) {
			expect(binary_search(s, s[data])).toBe(data);
		}

	})

	it('adler32', () => {
		expect(adler32("Wikipedia")).toBe(300286872);
		read();
	})

})

